

############################################################
# TestContainers JDBC URL explained
############################################################
#
# When running integration tests, we want our application to use a real MySQL database,
# but we don't want to install or manage MySQL manually. Instead, we use TestContainers,
# a Java library that can automatically start a temporary MySQL database inside a Docker
# container for the duration of the tests.
#
# The magic happens with the special JDBC URL below:
#   jdbc:tc:mysql:8.0.32:///testdb
#
# Here's what this means:
# - "jdbc:tc" is a special prefix recognized by TestContainers. When the application sees this prefix in the JDBC URL,
# it triggers the TestContainers library to automatically start and manage a Docker container running the specified
# database (in this case, MySQL) for the tests.
# - "mysql:8.0.32" specifies the type and version of the database (MySQL 8.0.32).
# - "/testdb" is the name of the database that will be created inside the container.
#
# When the tests start, TestContainers will:
# 1. Download the MySQL Docker image (if not already present).
# 2. Start a new MySQL container with the specified version.
# 3. Create the database named "testdb".
# 4. Set up the connection so that the application can use it as if it were a normal database.
# 5. When the tests finish, the container is automatically stopped and removed.
#
# This approach means:
# - No manual database setup is needed for tests.
# - Each test run gets a fresh, isolated database environment.
# - No extra Java code is needed to configure TestContainers; just use the special JDBC URL.
# - The username and password below are used to connect to the database inside the container.
#
# For more details, see:
# https://www.testcontainers.org/features/databases/
# https://www.testcontainers.org/modules/databases/jdbc/

spring.datasource.url=jdbc:tc:mysql:8.0.32:///testdb
spring.datasource.username=test
spring.datasource.password=test

# Use JPA to automatically create the database schema for tests
# Avoid using 'create-drop' to prevent errors with CI GitHub Actions
# It's not necessary to drop the schema after tests as the container is removed
# It will create the schema at startup and keep it for the duration of the tests
spring.jpa.hibernate.ddl-auto=none
spring.jpa.properties.jakarta.persistence.schema-generation.database.action=create